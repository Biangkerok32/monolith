<?xml version="1.0" encoding="GB2312"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd"  default-lazy-init="false" default-autowire="byName">

     
	<bean id="ResourceConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>WEB-INF/conf/server.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="1" />
		<property name="maxIdle" value="2" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="testWhileIdle" value="true" />
		<property name="validationQuery" value="select 1 from dual" />
		<!--<property name="poolPreparedStatements" value="true" />-->
		<property name="defaultAutoCommit" value="true" />
	</bean>

<bean id="monoDataSourceService" class="com.runssnail.monolith.dal.datasources.DefaultMonoDataSourceService">
	<property name="dataSourceDescriptors">
		<set>
			<bean class="com.runssnail.monolith.dal.datasources.MonoDataSourceDescriptor"><!-- com.alibaba.cobar.client.datasources.CobarDataSourceDescriptor -->
				<property name="identity" value="runssnail1"/>
				<property name="targetDataSource" ref="dataSource"/>
				<!-- 
				<property name="targetDetectorDataSource" ref="dataSource"/>
				<property name="standbyDataSource" ref="dataSource"/>
				<property name="standbyDetectorDataSource" ref="dataSource"/>
				 -->
			</bean>
			<!-- 
			<bean class="com.alibaba.cobar.client.datasources.CobarDataSourceDescriptor">
				<property name="identity" value="partition2"/>
				<property name="targetDataSource" ref="partition2_main"/>
				<property name="targetDetectorDataSource" ref="partition2_main"/>
				<property name="standbyDataSource" ref="partition2_standby"/>
				<property name="standbyDetectorDataSource" ref="partition2_standby"/>
			</bean>
			  -->
		</set>
	</property>
	<!-- 
	<property name="haDataSourceCreator">
		<bean class="com.alibaba.cobar.client.datasources.ha.FailoverHotSwapDataSourceCreator">
			<property name="detectingSql" value="update cobarha set timeflag=CURRENT_TIMESTAMP()"/>
		</bean>
	</property>
	 -->
</bean>

<!-- 
<bean id="transactionManager"
	class="com.alibaba.cobar.client.transaction.MultipleDataSourcesTransactionManager">
	<property name="cobarDataSourceService" ref="cobarDataSourceService" />
</bean>
 -->

 
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
 
	<bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
		<property name="propagationBehaviorName" value="PROPAGATION_REQUIRES_NEW"></property>
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- namedParameterJdbcTemplate 定义：基于bean属性名的ORM映射-->
	<bean id="namedParameterJdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg type="org.springframework.jdbc.core.JdbcOperations">
			<ref bean="jdbcTemplate" />
		</constructor-arg>
	</bean>

	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation">
			<value>WEB-INF/conf/SqlMapConfig.xml</value>
		</property>
		<!-- 
		<property name="mappingLocations">
			<value>classpath:**/*_sqlmap.xml</value>
		</property>
		 -->
		<property name="dataSource" ref="dataSource" />
		<property name="useTransactionAwareDataSource">
			<value>false</value>
		</property>
	</bean>
	
	<!-- 路由规则配置-->
<bean id="internalRouter" class="com.runssnail.monolith.dal.router.config.MonoRouterXmlFactoryBean">
	<property name="functionsMap">
		<map>
			<entry key="mod">
				<bean class="com.runssnail.monolith.dal.router.function.ModFunction">
					<constructor-arg><value>2</value></constructor-arg>
				</bean>
			</entry>
			<entry key="hashing">
				<bean class="com.runssnail.monolith.dal.router.function.HashingFunction">
				</bean>
			</entry>
			
		</map>
	</property>
	<property name="configLocation"  value="WEB-INF/conf/routing-rules.xml" />
	<property name="enableCache" value="true" />
	<!-- 
	<property name="configLocations">
		<list>
			 <value>classpath:META-INF/routing/offer-sql-action-rules.xml</value>
			<value>WEB-INF/conf/routing-rules.xml</value>
		</list>
	</property>
	 -->
</bean>
	

	<bean id="sqlMapClientTemplate" class="com.runssnail.monolith.dal.MonoSqlMapClientTemplate">
		<property name="sqlMapClient" ref="sqlMapClient" />
		<property name="monoDataSourceService" ref="monoDataSourceService" />
		<property name="router" ref="internalRouter" />
		<!-- 关闭SQL 审核
		<property name="sqlAuditor">
			<bean class="com.alibaba.cobar.client.audit.SimpleSqlAuditor" />
		</property>
		 -->
		<property name="profileLongTimeRunningSql" value="true" />
		<property name="longTimeRunningSqlIntervalThreshold" value="3600000" />
		
	</bean>


<!-- 
	<bean id="sqlMapClientTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
		<property name="dataSource" ref="dataSource" />
		<property name="sqlMapClient" ref="sqlMapClient" />
	</bean>
 -->
	
</beans>